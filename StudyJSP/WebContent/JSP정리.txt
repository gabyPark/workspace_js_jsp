
 웹 프로그래밍 :
  웹 상에서 사용자와 기업 또는 사용자들간의 연결을 가능하게 하는 프로그래밍 언어
  
  1) 정적 데이터 : HTML을 사용해서 웹문서,정적인데이터(이미지) 
             => 잘 바뀌지 않는값들...
  
  2) 동적 데이터 : 동적데이터 (변화되는 데이터=>DB),CGI,ASP,PHP,JSP
 
  
  - 서버 : 정보를 제공해주는 컴퓨터(대상)
  - 클라이언트 : 정보를 제공받는 컴퓨터(대상)
  
  - 정보 요청 (Request)
  - 정보 응답 (Response)
  
  웹 프로그래밍 언어
  - CGI( Common GateWay Interface ) => c언어(window) / Perl언어(UNIX)
    => 프로세스 기반의 프로그래밍 언어 (시스템상으로 많은 문제가 있음)
  - ASP => C# 언어(.NET언어)  
  - PHP => C 언어 (쉽고 빠르게 작성 가능, 100%무료, 보안적문제(대규모시스템) )
  - JSP => Java언어 (JSP언어) : 멀티쓰레드 기반의 프로그래밍 언어  
  
  
  *JSP 지시어(Directive) p150~
   - 클라이언트가 요청한 JSP페이지가 실행될 때, 필요한 정보를 저장
   - JSP 컨테이너에 정보를 전달해서 처리 
   - 태그 안에서 @시작 page,include,taglib (3가지)
  
  
  *JSP 스크립트 요소 P160~
   - JSP 페이지에 Java 코드를 사용하는 방법
   - 선언문(Declaration), 스크립틀릿(Scriptlet), 표현식(Expression)
   
   - 선언문 
     자바에서 사용하는 멤버변수, 메서드를 선언하는 구문 (전역변수/메서드) 
   <%! %> 태그 사용
   
   <%!
     int age = 10;
     String name="itwill";   
   %>
   
   <%!
     public void method(){
        sysout("hello");
     }     
     %>
   
   
   - 스크립틀릿 p162~
     JSP파일은 Java 파일이기 때문에 화면(html)에 표현이 어렵다.
         쉽게 웹 페이지를 사용할수 있게 만든 형태
    
    <%
            자바코드 사용
            선언문에서 선언한 변수, 메서드 호출 가능
            지역변수를 선언 사용     
            메서드 선언(x)
    %>     
           
   
   - 표현식 p170~
     선언문, 스크립틀릿에 선언된 변수, 메서드리턴값을 사용해서 화면에 출력
     <%= %> 
     => print()실행되는것 처럼 사용, [;] 사용할수 없음
     ex)   <%="hello"%>        <%="hello";%>
     ex)   out.print("hello"); out.print("hello";);
     
     <%=변수 %>  
     <%=리턴 값이 있는 메서드() %>  
     <%=수식(변수,리턴 값이있는 메서드()) %>  
     
  
  p177~
   JSP 내장객체 : import,객체의 선언 없이 사용가능한 객체 
   => javax.servlet 패키지
   => 내장객체는 JSP페이지 -> 서블릿(클래스) 변경시 
      _jspService() 메서드 안에서 가장먼저 선언되기 때문에 해당 이름을 사용X
   
   
   ex)
   Itwill user = new Itwill();  
   user.getName();  
   -------------------------------
   user.getName();  (내장객체)
   
   page- java.lang.Object(javax.servlet.jsp.HttpJspPage)
        : 해당 페이지 서블릿 객체
   
   
   * javax.servlet 패키지 (8개)
     
     request : 클라이언트의 HTTP 요청정보를 저장하는 객체 
     response : HTTP 요청에 대한 응답정보를 저장하는 객체
     session : 클라이언트의 세션정보를 저장객체
     page : 해당 페이지 서블릿 객체
     pageContext : 페이지 실행시 필요한 컨텍스트정보를 저장하는 객체 
     out : 응답 페이지 전송을 위한 출력 스트림 객체 
     application : 동일한 애플리케이션의 컨텍스트 정보를 저장한 객체
     config : 해당페이지의 서블릿 설정정보(초기화정보)
     
   * java.lang 패키지 (1개)
     
     exception : 예외 처리 객체 
     
   
    jspf 파일 : JSP Servelt Page Framegment : JSP데이터 파일
    
    
    * 영역객체(scope)와  속성(attribute)  p209~
    
           해당객체에 정의된 유효한 범위 내에서 필요한 데이터를 저장하고 읽어들임으로써
           서로 공유할수 있는 범위를 영역(Scope), 공유되는 데이터를 속성(Attribute)
           
    =>  page,request,session,application 영역
    => 사용가능한 JSP 내장 객체 : pageContext,request,session,application
           
    
   영역
      page			request		session		application
      
  영역을 사용하는 내장객체
  	  pageContext	request		session		application
  	  
  영역 사용범위
          해당 페이지	     클라이언트 요청이    세션이 유지되는     서버가 실행되는 동안
                                     처리되는 페이지     페이지                 사용되는 페이지
                                 
  	  
  
  page영역 : 한번의 웹 브라우저(사용자)의 요청에 대해 하나의 JSP 페이지 호출
  -> pageContext 내장객체 사용 (jsp 페이지 정보 저장객체)
  -> 다른 내장객체 호출, 페이지 흐름제어, 에러데이터 체크 사용
  
  request영역 : 한번의 웹 브라우저(사용자)의 요청에 대해 같은 요청을 처리하는 
  페이지가 호출(사용)
  -> request 내장객체를 사용
  -> include액션태그, forward 액션태그 사용시 request 내장객체의 정보 공유가능
  
  session영역 : 하나의 웹 브라우저당 1개의 객체 생성 정보를 유지
  -> session 내장객체를 사용
  -> 사용자 인증
  
  application영역 : 하나의 웹 애플리케이션(프로젝트,context)정보를 저장
  -> application 내장객체를 사용
  -> 서버의 설정 정보저장, 프로젝트를 실행할때 발생하는 이벤트로그
  
  
  * 쿠키(Cookie) : HTTP 프로토콜은 웹 브라우저의 요청이 처리된 후에
  해당 클라이언트와의 연결을 지속하지 않을때, 사용하는 정보.
  => 클라이언트 쪽에서 관리되는 데이터
  
  
                        페이지 요청(request)
                ->
    [클라이언트]			[웹서버]
                <-
                        페이지 응답(response)
    -----------------------------------
    * 해당 페이지 응답후 클라이언트와 웹서버의 연결이 끊김.
    
    [클라이언트]			[웹서버]
    
    ============================================
                      페이지 요청(request)
                ->
    [클라이언트]			[웹서버]
                <-
                        페이지 응답(response)[cookie값]
    -----------------------------------
    * 해당 페이지 응답후 클라이언트와 웹서버의 연결이 끊김.
    
    [클라이언트]			[웹서버]
      [쿠키값]     
    -----------------------------------
                     페이지 요청(request) [쿠키값]
                ->
    [클라이언트]			[웹서버]
     [쿠키값]     <-
                        페이지 응답(response)[cookie값]
                        
                        
   * 쿠키 : 이름,값,유효기간,도메인, 경로,.... 정보로 구성되어있음
         - 쿠키의 이름은 알파벳,숫자로 구성되어 있음.(공백,괄호,등호,콤마,...사용가능하지만 인코딩필요)
         - 정보가 클라이언트 PC(HDD)에 저장
         - 저장 용량이 제한(4kb)
         - 보안에 취약
         - 브라우저에서 사용유무를 결정 가능
         - 도메인당 쿠키 생성(웹페이지당) 
                              
   크롬                              
  C:\Users\ITWILL\AppData\Local
  \Google\Chrome\User Data\Default\Cache
  
  IE
  C:\Users\ITWILL\AppData\Local\Microsoft\Windows\INetCache
  
  
  * 쿠키 사용 순서
  
   1) 쿠키 작성(생성) => 서버
      - 쿠키 생성  
         Cookie cookie = new Cookie(이름,값);
      - 쿠키를 사용할때 필요할 설정
                유효기간, 도메인,보안정보,....
      - 웹 브라우저에 생성된 쿠키를 전송  (response)           
   
   2) 웹 브라우저에서 쿠키 사용 => 클라이언트
      - 웹 브라우저에서 페이지 요청-> 쿠키값을 사용
      - 쿠키는 이름,값의 쌍으로 만들어진 데이터 => 배열
      - 해당 배열을 사용해서 쿠키의 이름을 가져온다
      - 쿠키의 이름을 사용해서 쿠키의 값을 가져옴.
      
 
   p428~
   JDBC(Java DataBase Connectivity) : Java와 DB(Mysql)연결하는
   프로그램    
   
   WebContent/WEB-INF/lib/mysql-connector-java-5.1.49-bin.jar
     -> 파일 추가 ( 설치 )
     
   
   * JDBC 사용하기
   0. 드라이버 설치
   1. 드라이버 로드
   => Class.forName("com.mysql.jdbc.Driver");
   2. 디비 연결  (+ 디비 연결정보 저장)
   => 
   Connection con =
   DriverManager.getConnection("jdbc:mysql://localhost:3306/jspdb","root","1234");
   
   3. SQL 쿼리 생성 & pstmt 객체 생성
   
   sql ="insert~  ?,?";
   
   pstmt = prepareStatement(sql);
   
   // ?에 값을 추가 
   // sql쿼리에 들어갈 데이터 타입을 확인
   // XXXX 들어갈 타입을 결정
   // => 쿼리구문의  ?개수와 동일
   
   pstmt.setXXXX(물음표위치,넣을값);
   
   
   // 4. sql 실행
   
   pstmt.executeUpdate(); => insert구문,update구문,delete구문
   pstmt.executeQuery(); => select구문
   
   
   
   * SELECT 동작
   
   => select 결과 -> ResultSet 타입으로 저장
   
    [레코드 셋] : select구문의 실행 결과
    
    * 레코드셋 데이터의 BOF를 커서가 가리키고있음.
     rs.next(); 커서를 다음으로 이동결과 데이터가 있을경우 true/false
    
     ============================
            B    O    F  (Begin Of File)
     ============================
   	       이름		나이 		주민번호
     --------------------------
             홍길동		20		900101-1
             김길동		21		900102-1
             박길동		22		900103-1
     ============================
           E     O    F  (End Of File)
     ============================        
     
     
  
  * 자바빈 (JavaBean) : 특정 규칙을 가지는 객체(클래스)
  1) 기본패키지 이외의 다른 패키지에 포함되어 있어야함.
  2) 기본 생성자가 필요함.
  3) 멤버변수는 private 접근지정자 사용
  4) 멤버변수에 접근가능한 set/get 메서드 필요
  5) set/get 메서드는 public 으로 사용
  
  => 디비 테이블의 정보를 저장하기위한 객체 
     멤버변수이름 == 테이블의 컬럼명
     
   * 자바빈 객체 => 액션 태그 (JSP)
   - 객체 생성
   <jsp:useBean id="객체명" class="객체의 주소(위치)" />
   
   - 객체 값 변경 : request.getParameter() + setXXX()
   <jsp:setProperty property="자바빈 변수명" name="객체명" param="파라미터명"/>
   
   - param의 값 property의 값이 동일한경우 param을 생략가능
   <jsp:setProperty property="자바빈 변수명" name="객체명"/>
   
   - 전달되는 모든 파라미터값을 설정  
   <jsp:setProperty property="*" name="객체명" param="*"/>
   <jsp:setProperty property="*" name="객체명" />
   
    
   - 객체 값 사용 : getXXX()       
   <jsp:getProperty property="자바빈 변수명" name="객체명"/>
     
    
    * 예외처리 : 예외 상황에 대한 대처 
     -> 자바에서 자주 발생하는 예외상황을 객체로 표현=>Exception
     -> Throwable  / Exception 객체와 상속관계
     -> 자바에서는 예외가 발생 처리 => 예외를 던진다
       => catch구문에서 잡아서 처리 
     => 목적 : 에러가 발생해도 프로그램을 정상적으로 종료시키기 위한 동작
      
     [예외처리 방법] 
     try{
             예외가 발생하지도 모르는 코드
     }catch(Exception 객체){
              예외를 처리하는 코드
     }finally{
             예외 발생여부와 상관없이 반드시 실행되는 코드
     }  
       
 ---------------------------------------------------
  start
     code 1
     code 2
     code 3 => 에러발생
     code 4
     code 5
     code 6
  end  
     
     =>파일의 일부만 에러가 발생해도 전부를 사용 X
     
   start
     try{
	     code 1
	     code 2
	     code 3 => 에러발생
	     code 4
	     code 5
   		 code 6
    }catch(){
             예외처리=>에러메세지 출력
    }finally{
    
    }    
  end  
   => 1,2번 실행 + start,end 실행
   
      
    * 커넥션 풀 (Connection pool) p443~  
     -> 자카르타 커넥션풀 사용
     : DB에 연결하기위한 객체 (커넥션)을 미리 생성해서 대여하면서 사용
     
     1) service()메서드당 1개씩 할당
     2) 커넥션의 개수를 제한
     3) 커넥션을 다쓰면 자원 회수(반납)
     
     ---------------------------------------------------
     
     웹 페이지 요청 -> con 이 있는지 체크 (커넥션풀에서 확인)
          -> 있는경우 -> con 객체 할당 -> con 사용 -> con 반납
          
          -> 없는경우 -> 객체 반환시 까지 대기/임시로 con객체 생성 -> 할당,사용,반납
      
           기존방식
           디비연결 -> 사용 -> 디비 종료
       
           커넥션풀
       
       pool[ con1, con2, ]    
               
          디비 연결 con1 -> 사용 -> 디비 종료(x)-> pool 반납   
   
  
  
  http://commons.apache.org/
  
  
  Collections  
  https://commons.apache.org/proper/commons-collections/download_collections.cgi
  
  DBCP
  http://commons.apache.org/proper/commons-dbcp/download_dbcp.cgi
  
  Pool
  https://commons.apache.org/proper/commons-pool/download_pool.cgi
  
  	  
   <Resource 
      name="jdbc/mysqlDB"
      => 디비연결 자원의 이름 
      
      auth="Container"
      => 자원 관리자 지정( Application/Container ) 
      
      type="javax.sql.DataSource"
      => 웹에서 사용할때 사용되는 클래스
      
      driverClassName="com.mysql.jdbc.Driver"
      url="jdbc:mysql://localhost:3306/jspdb"
      username="root"
      password="1234"
      => 드라이버주소,디비주소,디비 아이디,비밀번호
      
      maxWait="5000"
      => 커넥션 풀 회수 대기 시간 설정 (1/1000초)       
            
   />	  
  	
  	
  	          
 
    
    
    
    
    
    
    
   
   
   

  
  
   
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
